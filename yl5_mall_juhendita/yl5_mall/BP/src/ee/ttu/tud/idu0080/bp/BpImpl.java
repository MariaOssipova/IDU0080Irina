
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ee.ttu.tud.idu0080.bp;

import java.net.URL;
import java.util.GregorianCalendar;
import java.util.logging.Logger;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.namespace.QName;

import org.example.pakkumus.Pakkumus;
import org.example.pakkumus.PakkumusParing;
import org.example.pakkumus.PakkumusVastus;
import org.example.pakkumus.Pakkumus_Service;
import org.example.transport.Transport;
import org.example.transport.Transport_Service;

import ttu.idu0080.order.server.OrderService;
import ttu.idu0080.order.server.OrderServiceService;
import ttu.idu0080.order.server.OrderShipmentService;
import ttu.idu0080.order.server.OrderShipmentServiceService;

import ee.ttu.tud.idu0080.kuller.Kuller;
import ee.ttu.tud.idu0080.kuller.Kuller_Service;
import ee.ttu.tud.idu0080.kuller.Kuller_Type;

/**
 * This class was generated by Apache CXF 2.7.4
 * 2013-04-11T23:34:23.208+03:00
 * Generated source version: 2.7.4
 * 
 */

@javax.jws.WebService(
                      serviceName = "bp",
                      portName = "bpSOAP",
                      targetNamespace = "http://idu0080.tud.ttu.ee/bp/",
                      wsdlLocation = "http://localhost:8085/BpService?wsdl",
                      endpointInterface = "ee.ttu.tud.idu0080.bp.Bp")
                      
public class BpImpl implements Bp {

    private static final Logger LOG = Logger.getLogger(BpImpl.class.getName());

    /* (non-Javadoc)
     * @see ee.ttu.tud.idu0080.bp.Bp#tellimuseEsitamine(ee.ttu.tud.idu0080.bp.MinuTellimus  parameters )*
     */
    public ee.ttu.tud.idu0080.bp.MinuTellimuseVastus tellimuseEsitamine(MinuTellimus parameters) { 
        LOG.info("Executing operation tellimuseEsitamine");
        System.out.println(parameters);
        
        int tellimus_id=parameters.getId().intValue();
        
        System.out.println("Minu tellimus id: "+tellimus_id);
        
        try {
        	OrderServiceService ss = new OrderServiceService(
        			new URL("http://tund.ttu.ee:80/orderservice/orders?wsdl"), 
        			new QName("http://server.order.idu0080.ttu/", "OrderServiceService"));
            OrderService port = ss.getOrderServicePort();  
           
            
            System.out.println("Invoking getOrdersByOrderId...");
            //int _getOrdersByOrderId_orderId = -1079237325;
            ttu.idu0080.order.server.Order tellimus = port.getOrdersByOrderId(tellimus_id);
            System.out.println("saabunud tellimus=" + tellimus);

            //siin küsin enda kirjutatud teenuselt kullerite andmed
            Kuller_Service kullerss = new Kuller_Service(
            		new URL("http://localhost:8080/BPTeenused/services/kullerSOAP?wsdl"), 
            		new QName("http://idu0080.tud.ttu.ee/kuller/", "kuller"));
            Kuller kullerport = kullerss.getKullerSOAP();  
            
            System.out.println("Invoking getKullerid...");
            ee.ttu.tud.idu0080.kuller.KulleridVastus minukullerid = kullerport.getKullerid();
            System.out.println("getKullerid.result=" + minukullerid);     
            
            //See on juba samm 3, seda tunnis me ei teinud
            String pakkumus="";
            String kuller="";
            double hind=0;
            //Iga kulleri kohta pean pakkumuse välja arvutama
            if(minukullerid!=null && minukullerid.getKuller().size()>0)
            {
            	Pakkumus_Service ps = new Pakkumus_Service(
            			new URL("http://localhost:8080/BPTeenused/services/pakkumusSOAP?wsdl"), 
            			new QName("http://www.example.org/pakkumus/", "pakkumus"));
                Pakkumus pport = ps.getPakkumusSOAP();  
                
                //ja nii see käib
            	for(int i=0;i< minukullerid.getKuller().size();i++)
            	{
            		Kuller_Type kt=minukullerid.getKuller().get(i);
            		System.out.println("kuller "+i+" " + kt.getNimi()+" "+kt.getKullerId());
            		
            		//iga kulleri kohta teen Pakkumuse päringu
            		PakkumusParing parameetrid = new PakkumusParing();
            		parameetrid.setKullerId(kt.getKullerId());
            		
            		/*NB! siin peate ise pisut vaeva nägema ja tellimuse andmed kaasa panema
            		 * 
            		 * 
            		 * 
            		 * 
            		 * 
            		parameetrid.setTellimus(value);
            		*/
            		
            		PakkumusVastus pakkumus_vastus = pport.teePakkumus(parameetrid);
            		System.out.println("pakkumuse tulemus: kulleri id "+kt.getKullerId()+", " + pakkumus_vastus.getOfferId()+" "+pakkumus_vastus.getHind());
            		
            		//arvutan headust
            		double headus=pakkumus_vastus.getHind()*pakkumus_vastus.getPaevadeArv()*0.01;
            		
            		pakkumus=pakkumus_vastus.getOfferId();
            		kuller=kt.getNimi();
            		hind=pakkumus_vastus.getHind();
            		
            		//jätame iga kulleri kohta tema headus meelde ja ka pakkumine
            		
            		/*NB! siin peate ise pisut vaeva nägema
            		 * 
            		 * 
            		 * 
            		 * 
            		 */
            	}

            }
            
            //Ja siin on nüüd transporditeenuse väljakutse
            Transport_Service ts = new Transport_Service(
            		new URL("http://localhost:8080/BPTeenused/services/transportSOAP?wsdl"), 
            		new QName("http://www.example.org/transport/", "transport"));
            Transport tport = ts.getTransportSOAP();  
            
            
            System.out.println("Invoking transport...");
            String tracking_id = tport.transport(pakkumus);
            System.out.println("tracking_id=" + tracking_id);

            //Viimane samm: saadame kõik andmed tund.ttu.ee serverisse
            OrderShipmentServiceService is = new OrderShipmentServiceService(
            		new URL("http://tund.ttu.ee/orderservice/order_shipments?wsdl"), 
            		new QName("http://server.order.idu0080.ttu/", "OrderShipmentServiceService"));
            OrderShipmentService iport = is.getOrderShipmentServicePort();  
            
            System.out.println("Invoking insertOrderShipment...");
            String ryhm="ryhmirina";
            
            
            javax.xml.datatype.XMLGregorianCalendar millal = 
            		javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar());
            
            /*
             * NB!!!! millal peab olema kohale toimetamise kuupäev, mitte tänane kuupäev!
             * Täienda
             * 
             * */
            
            int vastus = iport.insertOrderShipment(tellimus_id, ryhm, tracking_id,
            		kuller, millal, hind);
            System.out.println("insertOrderShipment.result=" + vastus);


            
        	//siin on lõplik lõpp
        	ee.ttu.tud.idu0080.bp.MinuTellimuseVastus loppvastus = new ee.ttu.tud.idu0080.bp.MinuTellimuseVastus();
        	loppvastus.setTeade("Huraaa, kõik töötab!");
            return loppvastus;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
